import h5py
import torch
import numpy as np

from modiscolite.io import save_hdf5
from modiscolite.tfmodisco import TFMoDISco
from modiscolite.util import calculate_window_offsets

device = torch.device('cuda')
print('Using device:', torch.cuda.get_device_name())

# user input defines the TF the model is trained for # 
TF_to_predict = input(' TF to test on. "HES1", "HEYL", "MYOD1" or "MYOG".\n Multi not supported.\n Press "enter" to choose "HES1": ')
if TF_to_predict == '':
    TF_to_predict = 'HES1'
print('Using: ', TF_to_predict)

# load the one-hot-encoded sequence(s) and the attribitutions generated by 'attribitute.py' #
ohe = np.load('{}_report_r/{}_ohe.npz'.format(TF_to_predict,TF_to_predict))['arr_0']
attr = np.load('{}_report_r/{}_attr.npz'.format(TF_to_predict,TF_to_predict))['arr_0']

center = ohe.shape[2] // 2
start, end = calculate_window_offsets(center=center, window_size=1000)

ohe = ohe[:, :, start:end].transpose(0, 2, 1)
attr = attr[:, :, start:end].transpose(0, 2, 1)

ohe = ohe.astype('float32')
attr = attr.astype('float32')

pos, neg = TFMoDISco(one_hot=ohe, hypothetical_contribs=attr, sliding_window_size=21, 
                     max_seqlets_per_metacluster=20000, 
                     verbose=True)
'''
Default: 
    one_hot, hypothetical_contribs, sliding_window_size=21, 
	flank_size=10, min_metacluster_size=100,
	weak_threshold_for_counting_sign=0.8, max_seqlets_per_metacluster=20000,
	target_seqlet_fdr=0.2, min_passing_windows_frac=0.03,
	max_passing_windows_frac=0.2, n_leiden_runs=50, n_leiden_iterations=-1, 
	min_overlap_while_sliding=0.7, nearest_neighbors_to_compute=500, 
	affmat_correlation_threshold=0.15, tsne_perplexity=10.0, 
	frac_support_to_trim_to=0.2, min_num_to_trim_to=30, trim_to_window_size=30, 
	initial_flank_to_add=10, final_flank_to_add=0,
	prob_and_pertrack_sim_merge_thresholds=[(0.8,0.8), (0.5, 0.85), (0.2, 0.9)],
	prob_and_pertrack_sim_dealbreaker_thresholds=[(0.4, 0.75), (0.2,0.8), (0.1, 0.85), (0.0,0.9)],
	subcluster_perplexity=50, merging_max_seqlets_subsample=300,
	final_min_cluster_size=20, min_ic_in_window=0.6, min_ic_windowsize=6,
	ppm_pseudocount=0.001, verbose=False
'''

save_hdf5('{}_report_r/{}_motifs.hdf5'.format(TF_to_predict,TF_to_predict), pos, neg, window_size=1000)
